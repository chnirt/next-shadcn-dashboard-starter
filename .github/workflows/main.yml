name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g pnpm
      - run: pnpm install
      - run: pnpm build

  docs:
    name: Generate & Update Docs
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Detect previous tag (if exists)
        id: previoustag
        run: |
          prev_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || true)
          if [ -z "$prev_tag" ]; then
            echo "No previous tag found, using initial commit"
            prev_tag=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_tag=$prev_tag" >> $GITHUB_ENV

      - name: Collect git diff
        run: |
          git log ${{ env.prev_tag }}..HEAD --pretty=format:'%h %s' > commits.txt
          echo "diff=$(cat commits.txt)" >> $GITHUB_ENV

      - name: Generate Release Notes with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          PROMPT="You are an expert solution architect. Generate release notes for these commits:\n${{ env.diff }}\nClassify as patch/minor/major. Mention API/logic changes if any."
          RESPONSE=$(curl https://api.openai.com/v1/chat/completions \
            -s -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"gpt-4.1\",
              \"messages\": [{\"role\": \"user\", \"content\": \"$PROMPT\"}],
              \"temperature\": 0.2
            }" | jq -r '.choices[0].message.content')
          echo "$RESPONSE" > release_notes.md

      - name: Update docs based on rules
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          MAJOR_MINOR=$(echo $VERSION | cut -d. -f1,2)
          mkdir -p docs/release-notes docs/release-overview

          # Always update changelog
          echo -e "\n## $VERSION\n$(cat release_notes.md)" >> CHANGELOG.md

          # Rule: Major/Minor release -> new file
          if [[ "$VERSION" =~ \.0$ ]]; then
            echo "$(cat release_notes.md)" > docs/release-notes/${VERSION}.md
          fi

          # Rule: too many patches -> overview
          PATCH_COUNT=$(git tag --list "${MAJOR_MINOR}.*" | wc -l)
          if [ $PATCH_COUNT -ge 10 ]; then
            echo "Summary of $PATCH_COUNT patches under $MAJOR_MINOR.x" > docs/release-overview/${MAJOR_MINOR}.x.md
            cat CHANGELOG.md | grep "## ${MAJOR_MINOR}" -A 50 >> docs/release-overview/${MAJOR_MINOR}.x.md
          fi

      - name: Commit and push updated docs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md docs/
          git commit -m "docs: update release notes for $VERSION" || echo "No changes to commit"
          git push origin $GITHUB_REF_NAME

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - uses: actions/checkout@v4
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          files: |
            .next/**
