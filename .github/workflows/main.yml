name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: # Cho phép chạy tay để test
    inputs:
      tag:
        description: "Tag version (e.g. v1.0.0)"
        required: true

jobs:
  build-and-deploy:
    name: Build & Deploy to Vercel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install -g pnpm vercel
          pnpm install

      - name: Build project
        run: pnpm build

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: >-
            --prod
            -e NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            -e CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            -e NEXT_PUBLIC_CLERK_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL || '/auth/sign-in' }}
            -e NEXT_PUBLIC_CLERK_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL || '/auth/sign-up' }}
            -e NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL || '/dashboard/overview' }}
            -e NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL || '/dashboard/overview' }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-comment: false

  docs:
    name: Generate & Update Docs
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - uses: actions/checkout@v4

      - name: Set VERSION
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Detect previous tag (if exists)
        run: |
          prev_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || true)
          if [ -z "$prev_tag" ]; then
            echo "No previous tag found, using initial commit"
            prev_tag=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_tag=$prev_tag" >> $GITHUB_ENV

      - name: Collect git diff
        run: |
          echo "diff<<EOF" >> $GITHUB_ENV
          git log ${{ env.prev_tag }}..HEAD --pretty=format:'%h %s' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate Release Notes with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          PROMPT="You are an expert solution architect. Generate release notes for these commits:\n${{ env.diff }}\nClassify as patch/minor/major. Mention API/logic changes if any."
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"gpt-4.1\",
              \"messages\": [{\"role\": \"user\", \"content\": \"$PROMPT\"}],
              \"temperature\": 0.2
            }" | jq -r '.choices[0].message.content')
      
          if [ -z "$RESPONSE" ] || [ "$RESPONSE" = "null" ]; then
            echo "⚠️ No AI-generated notes, fallback to raw commits."
            RESPONSE="${{ env.diff }}"
          fi
      
          echo "$RESPONSE" > release_notes.md

      - name: Generate Release Notes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AI_PROVIDER: gemini # hoặc openai
        run: |
          node ./scripts/generate_release_notes.js ${{ env.VERSION }}

      - name: Commit and push updated docs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md docs/
          git commit -m "docs: update release notes for ${{ env.VERSION }}" || echo "No changes to commit"
          git push origin HEAD:refs/heads/feature/test-release --force